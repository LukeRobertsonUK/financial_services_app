-unless @incoming_friend_requests.blank?
  %h3 Incoming friend requests
  %ul
    - @incoming_friend_requests.each do |friendship|
      %li
        =friendship.proposer.email
        = link_to "accept friendship", edit_friendship_path(friendship)
        = link_to "deny friendship", friendship, method: :delete, data: { confirm: 'Are you sure?' }
        = link_to "deny with blackball", friendship_path(friendship, black_ball: true), method: :delete, data: { confirm: 'Are you sure?' }

%h1 List of your friends

-unless @grouped_friends["Kindred Spirit"].blank?
  %h3 Kindred Spirits
  %ul
    - @grouped_friends["Kindred Spirit"].each do |user|
      %li
        =user.full_name
        = link_to "Edit friendship", edit_friendship_path(Friendship.where({proposer_id:current_user.id, proposee_id: user.id}).first || Friendship.where({proposer_id:user.id, proposee_id: current_user.id}).first )
-unless @grouped_friends["Respected Peer"].blank?
  %h3 Respected Peers
  %ul
    - @grouped_friends["Respected Peer"].each do |user|
      %li
        =user.full_name
        = link_to "Edit friendship", edit_friendship_path(Friendship.where({proposer_id:current_user.id, proposee_id: user.id}).first || Friendship.where({proposer_id:user.id, proposee_id: current_user.id}).first )
-unless @grouped_friends["Industry Participant"].blank?
  %h3 Industry Participants
  %ul
    - @grouped_friends["Industry Participant"].each do |user|
      %li
        =user.full_name
        = link_to "Edit friendship", edit_friendship_path(Friendship.where({proposer_id:current_user.id, proposee_id: user.id}).first || Friendship.where({proposer_id:user.id, proposee_id: current_user.id}).first )

%h3 Purgatory
-unless @grouped_friends["Purgatory"].blank?
  %ul
    - @grouped_friends["Purgatory"].each do |user|
      %li
        =user.full_name
        = link_to "Edit friendship", edit_friendship_path(Friendship.where({proposer_id:current_user.id, proposee_id: user.id}).first || Friendship.where({proposer_id:user.id, proposee_id: current_user.id}).first )



